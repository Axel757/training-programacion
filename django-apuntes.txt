Templates: 

views.py: 

def index(request):
    title = 'Django Course!!'
    return render(request, 'index.html', {
        'title': title
    })

index.html: 

<!DOCTYPE html>
<html >
<head>
    <title>Project Django</title>
</head>
<body>
    <h1>{{ title }}</h1> //El parametro se recibe de manera efectiva debido al framework de python

<p>{% lorem 1 b random %}</p>
    
</body>
</html>


views.py: 

def objProjects(request):
    #projects = list(Project.objects.values())
    projects = Project.objects.all()
    return render(request, 'projects.html', {
        'projects': projects
    })


projects.html:

<!DOCTYPE html>
<html >
<head>
    <title>Projects</title>
</head>
<body>
    <h1>Projects</h1>

<p>Proyectos: {{projects}}</p> el atributo projects se concatena de esta manera en el html para que sea renderizado
    
</body>
</html>



Render:

Se crea una nueva carpeta: templates en my app, dentro se crea un archivo html index de nuestra pagina principal en la app 

luego en views.py se importa la funcion django.shorcuts Render

ahora las funciones de llaman de la siguiente manera: 

def index(request):
    return render(request,'index.html') //"retorna" de manera "renderizada" la "solicitud" del archivo "index.html"

de esta manera el archivo index.html retorna el renderizado y solicitud de las rutas y funciones dentro de una pagina html    

DJANGO ADMIN:

crear usuario administrador
python manage.py createsuperuser

en admin.py:

from django.contrib import admin
from .models import Project, Task
# Register your models here.

admin.site.register(Project)
admin.site.register(Task)

en models.py:

# Create your models here.
class Project(models.Model):
    name = models.CharField(max_length=200)
    
    def __str__(self):
        return self.name

class Task(models.Model):
    title = models.CharField(max_length=200)
    description = models.TextField()
    project = models.ForeignKey(Project, on_delete=models.CASCADE)
    
    def __str__(self):
        return self.title + ' - ' + self.project.name

url: localhost:3000/admin


PARAMS y MODELS:

En views.py:

from django.http import HttpResponse, JsonResponse
from .models import Project, Task

funciones: 

def objProjects(request):
    p = list(Project.objects.values())
    return JsonResponse(p, safe=False)

def projects(request, id):
    p = Project.objects.get(id=id)
    return HttpResponse('Projecto: %s' % p.name)

def tasks(request, id):
    tarea = get_object_or_404(Task, id=id)
    return HttpResponse('Tarea: %s' % tarea.title)  

def titleTasks(request, title):
    tarea = Task.objects.get(title=title)
    return HttpResponse('Tarea: %s' % tarea.title)  

rutas:

    path('projects/', views.objProjects),
    path('projects/<int:id>', views.projects),      
    path('tasks/<int:id>', views.tasks),
    path('tasks/<str:title>', views.titleTasks)


PARAMS:

para recibir datos de una navegador para manejarlos de una base de datos
se puede usar parametros dentro de una url dinamica, de esta manera se puede esperar
una parametro de la url y que se almacene ese dato

para esto se requiere modificar la ruta que recibe el paramentro dentro de urls.py en myapp:


path('hello/<str:user>', views.hello)// esta ruta lo que hace es recibir un parametro str de un user dentro de la ruta hello/<tipodedato:nombredevariable>

ademas se tiene que modificar la funcion hello de views.py para que reciba el parametro que se requiere

def hello (request, user): //en este caso el parametro str:user
    print (user)//imprime por consola el str:user
    return HttpResponse("<h1>Hola loto</h1>")

en la url del servidor se tiene que indicar de la siguiente manera para que se ejecute la funcion segun la url que se especifico anteriomente:
ejemplo:
localhost:3000/hello/Axel //de esta manera se ejecuta la funcion hello con el parametro str:user indicado y se imprime el str por consola.

de igual manera de puede hacer con enteros 

    path('rut/<int:num>', views.rut)

    def rut(request, num):
    result = rut
    print(type(num))
    return HttpResponse("<h1>Rut:  %s</h1>"%num)

DJANGO SHELL:

python manage.py shell //ingresar al shell django

import myapp.models //importa los modelos de la aplicacion

from myapp.models import Project, Task //importa las clases de models.py

p = Project(name = 'nombre del projecto') //inserta un dato en el atributo de la tabla indicado, se guarda en una variable 'p'
p.save() //guarda los datos ingresados en la variable y modifica la tabla project

Project.objects.all() 
//Muestra cuantos objetos existen en la tabla

Project.objects.get(id= (1))
//Get consigue el atributo espicificado de la tabla

Project.objects.get(name= 'nombre del proyecto')
//Busca el nombre del proyecto por el filtro especificado

Project.objects.filter(name__startswith= 'nombre del proyecto')
//filtra el objeto por como inicia el nombre del atributo

p = Project.objects
p.filter(name__startswith= 'nombre del proyecto') //consulta con una variable p

- para ingresar y consultar una tarea dentro del projecto se puede hacer de la siguiente manera:

p = Project.objects.get(name = "prestamos") // se puede definir una variable que almacene una consulta
p.task_set.all()

p.task_set.create(title = 'tarea1', description = 'descripcion1')

exit() // salir del shell


APUNTE: 

La carpeta del proyecto en un principio no conoce los modelos de la aplicacion
y para darsela a conocer se requiere ingresar a settings.py en myapp
buscar el arreglo de INSTALLED_APPS[] y dentro del arreglo ingresar como string
el nombre de la carpeta en donde se almacenan los modelos de la db

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myapp' //Esta es la carpeta de la aplicacion donde se almacena el modelo
]

MODELS:

para definir los modelos y crear tablas de la aplicacion se debe ingresar
al archivo models.py, aqui es donde implementaras los modelos de consultas 
como tambien el CRUD de la aplicacion
de las taas creadas en la base de datos

class Project(models.Model): // se crea una clase del projecto que almacena los atributos de models.model, refiriendose a los modelos de la clase project
    name = models.CharField(max_length=200) // digamos que definimos un nombre de tipo char de una longitud de 200 caracteres

SQLITE3 Y MIGRACIONES A UNA BASE DE DATOS:  

descargar sqlite3 browser y importar la base de datos db.sqlite3

python manage.py makemigrations

python manage.py migrate

Ahora digamos que se requiere agregar otra tabla que este relacionada con la tabla
Project para esto se puede hacer lo siguiente: 


class Task(models.Model): //Se crea una tabla task para las tareas de usuario
    title = models.CharField(max_length=200) // se define un titulo de la tarea
    description = models.TextField() // una descripcion
    project = models.ForeignKey(Project, on_delete=models.CASCADE) // y una clave foranea que relaciona la tabla Project con la nueva tabla task, que ademas indica una funcion que al momento de borrar la tabla project de se eliminen los datos de la tabla task





INCLUDES:

Se crea un archivo urls.py en 'myapp' en donde se almacenaran
las rutas de las funciones creadas en los archivos de myapp
estas rutas son importadas con la funcion Include
a traves de la siguiente manera:

desde [mysite/urls.py] lo siguiente: 

from django.urls import path, include //se importa la funcion include en el archivo

urlpatterns = [
    path('', include('myapp.urls')) //se especifica dentro de la funcion include la ruta del archivo donde se guardan las rutas de myapp
]

/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/
Se requiere de modificar las rutas del projecto en
urls.py para ingresar a los archivos de la aplicacion 
que se requiere acceder

Views.py:

from django.shortcuts import render
from django.http import HttpResponse
# Create your views here.

def hello(request):
    return HttpResponse("<h1>Hola Mundo</h1>")

myapp:

from . import views
from django.urls import path
from django.contrib import admin

urlpatterns = [
        path('admin/', admin.site.urls),
        path("hello/", views.hello)
]

mysite: 

from django.contrib import admin
from django.urls import path, include
from myapp import views

urlpatterns = [

    path('', include('myapp.urls'))
]


Runserver:

python manage.py runserver 3000

crear projecto con sus configuraciones globales: 
python manage.py startproject mysite .

crear aplicaciones dentro del proyecto:

python manage.py startapp blog
python manage.py startapp store 
python manage.py startapp tasks

ctrl + c para cerrar servidor

crear proyecto:

django-admin startproject mysite .

python -m django --version
django-admin --version
pip install django
f1 - create new terminal
f1 - select interpreter - venv: venv
.\venv\Scripts\active
virtualenv venv
pip install virtualenv

Si no funciona se tienen que modificar las variables de entorno PATH
se copian y pegan las urls de los warnings al momento de instalar lo anterior
py get-pip.py
get-pip.py
Alias
crear una carpeta djangoproject
